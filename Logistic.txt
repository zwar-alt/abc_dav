import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def gradient_descent(X, y, theta, learning_rate, num_iterations):
    m = len(y)
    for _ in range(num_iterations):
        predictions = sigmoid(X @ theta)
        theta -= (learning_rate / m) * (X.T @ (predictions - y))
    return theta

# Create a small custom DataFrame
data = {
    'Age': [22, 24, 28, 30, 32, 35, 40, 45, 50, 55],
    'Years_with_company': [1, 2, 3, 2, 4, 5, 10, 12, 15, 18],
    'Churn': [0, 0, 1, 0, 1, 1, 0, 0, 1, 1]
}

df = pd.DataFrame(data)

X = df[['Age', 'Years_with_company']].values
y = df['Churn'].values

X = np.c_[np.ones(X.shape[0]), X]

theta = np.zeros(X.shape[1])
learning_rate = 0.1
num_iterations = 1000

theta = gradient_descent(X, y, theta, learning_rate, num_iterations)

# Plot Sigmoid curve
x_values = np.linspace(-10, 10, 100)
y_values = sigmoid(x_values)
plt.plot(x_values, y_values, color='red')
plt.title('Sigmoid Curve')
plt.xlabel('z')
plt.ylabel('Sigmoid(z)')
plt.grid(True)
plt.show()

# New customer for prediction
new_customer = np.array([0,22, 1])  # Bias=1, Age=28, Years=3
z = new_customer @ theta
predicted_prob = sigmoid(z)

print(f"Predicted probability of churn for new customer: {predicted_prob:.4f}")

if predicted_prob >= 0.5:
    print("Prediction: Churn")
else:
    print("Prediction: No Churn")

def multiple_linear_regression(X, y):
    X_b = np.c_[np.ones((X.shape[0], 1)), X]  # Add bias term
    theta_best = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y
    return theta_best

def predict_mlr(X, theta):
    X_b = np.c_[np.ones((X.shape[0], 1)), X]
    return X_b @ theta

# Sample Data for MLR
X_mlr = np.array([
    [1, 2],
    [2, 1],
    [3, 4],
    [4, 3],
    [5, 5]
])
y_mlr = np.array([5, 6, 9, 8, 10])

# Train
theta_mlr = multiple_linear_regression(X_mlr, y_mlr)

# Predict
y_pred_mlr = predict_mlr(X_mlr, theta_mlr)

# 3D Plot
fig = plt.figure(figsize=(10,7))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X_mlr[:,0], X_mlr[:,1], y_mlr, color='blue', label="Actual Points")